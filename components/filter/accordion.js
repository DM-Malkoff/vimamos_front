import AccordionItems from "./accordionItems";
import {useContext, useEffect, useState} from "react";
import {useRouter} from "next/router";
import {FilterDataContext, ShowFilterContext} from "../../context/context";
import {siteUrl} from "../../constants/config";

const Accordion = ({terms, onProductsUpdate}) => {
    const router = useRouter();
    const {slug: _, ...routerQueries} = router.query;

    /** –û–±–µ—Ä—Ç–∫–∞ - –æ–±—ä–µ–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ */
    const [filterContext, setFilterContext] = useContext(FilterDataContext);

    /** –û–±–µ—Ä—Ç–∫–∞ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ */
    const [showFilterContext, setShowFilterContext] = useContext(ShowFilterContext);

    /** –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ */
    const [isReset, setIsReset] = useState(false);
    
    /** –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */
    const [isLoading, setIsLoading] = useState(false);
    
    /** –õ–æ–≥–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ */
    const [debugLogs, setDebugLogs] = useState([]);
    
    const addLog = (message, data = null) => {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = `${timestamp}: ${message}${data ? ` ${JSON.stringify(data)}` : ''}`;
        console.log(logEntry);
        setDebugLogs(prev => [...prev.slice(-10), logEntry]); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ–≤
    };

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å" */
    const filterSearchHandler = async () => {
        if (isLoading) {
            addLog('‚è≥ –ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥–∏—Ç–µ...');
            return;
        }

        setIsLoading(true);
        addLog('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é...', {
            filterContext,
            isMobile: typeof window !== 'undefined' ? window.innerWidth <= 768 : false
        });

        try {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 100));

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ filterContext
            const preparedAttributes = {};
            const queryParams = { 
                id: router.query.id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                // slug: router.query.slug // –ò slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            };

            if (filterContext && Object.entries(filterContext).length) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ filterContext
                Object.entries(filterContext).forEach(([key, value]) => {
                    if (key === 'min_price' || key === 'max_price') {
                        if (value) {
                            queryParams[key] = value;
                        }
                    } else {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ value —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã —Å slug
                        if (Array.isArray(value) && value.length > 0 && value[0].slug) {
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ slug –∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
                            preparedAttributes[key] = value.map(item => item.slug);
                            queryParams[key] = value.map(item => item.slug).join(',');
                        }
                    }
                });
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            const requestBody = {
                filters: {
                    category_id: router.query.id ? parseInt(router.query.id) : null,
                    min_price: filterContext.min_price ? parseInt(filterContext.min_price) : null,
                    max_price: filterContext.max_price ? parseInt(filterContext.max_price) : null,
                },
                attributes: preparedAttributes
            };

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Next.js API route –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å CORS –ø—Ä–æ–±–ª–µ–º
            const apiUrl = '/api/search-products';

            addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', {
                url: apiUrl,
                method: 'POST',
                body: requestBody,
                queryParams,
                hostname: typeof window !== 'undefined' ? window.location.hostname : 'unknown',
                userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'
            });

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });

            addLog('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
                status: response.status,
                ok: response.ok,
                statusText: response.statusText,
                headers: {
                    contentType: response.headers.get('content-type'),
                    corsHeaders: response.headers.get('access-control-allow-origin')
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                addLog('üö´ –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:', {
                    status: response.status,
                    statusText: response.statusText,
                    errorText: errorText
                });
                throw new Error(`API error: ${response.status} ${response.statusText} - ${errorText}`);
            }

            const data = await response.json();
            addLog('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', { productsCount: data?.length || 'unknown' });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            await router.push({
                pathname: router.query.slug,
                query: queryParams,
            }, undefined, { shallow: true });

            addLog('üîÑ URL –æ–±–Ω–æ–≤–ª–µ–Ω');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (onProductsUpdate) {
                onProductsUpdate(data);
                addLog('üì¶ –¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            setShowFilterContext(false);
            addLog('‚ùå –§–∏–ª—å—Ç—Ä –∑–∞–∫—Ä—ã—Ç');

        } catch (error) {
            addLog('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error.message);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            setShowFilterContext(false);
        } finally {
            setIsLoading(false);
        }
    };

    const onClearFilter = () => {
        setShowFilterContext(false);
        setIsReset(true);
        setFilterContext({}); // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        router.push({
            pathname: router.query.slug,
            query: {
                id: router.query.id
            }
        });
    }

    return (
        <>
            {terms?.map((item, index) => (
                <div key={`accordion-${item.id}`}>
                    <AccordionItems
                        item={item}
                        index={index}
                        isReset={isReset}
                        onPress={filterSearchHandler}
                        isLast={index === terms.length - 1}
                    />
                </div>
            )) ?? null}

            <div className="filter_buttons_wrap">
                <div className="filter_buttons">
                    <span 
                        className={`shop_btn shop2-filter-go ${isLoading ? 'loading' : ''}`}
                        onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            addLog('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∫–∞–∑–∞—Ç—å"');
                            filterSearchHandler();
                        }}
                        style={{
                            opacity: isLoading ? 0.6 : 1,
                            pointerEvents: isLoading ? 'none' : 'auto',
                            position: 'relative'
                        }}
                    >
                        {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–∫–∞–∑–∞—Ç—å'}
                        {isLoading && (
                            <span style={{
                                position: 'absolute',
                                right: '8px',
                                top: '50%',
                                transform: 'translateY(-50%)',
                                animation: 'spin 1s linear infinite'
                            }}>
                                ‚è≥
                            </span>
                        )}
                    </span>
                    <span 
                        className="shop_btn reset" 
                        onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            addLog('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—á–∏—Å—Ç–∏—Ç—å"');
                            onClearFilter();
                        }}
                        style={{
                            opacity: isLoading ? 0.6 : 1,
                            pointerEvents: isLoading ? 'none' : 'auto'
                        }}
                    >
                        –û—á–∏—Å—Ç–∏—Ç—å
                    </span>
                </div>
            </div>

            {/* –ú–æ–±–∏–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
            {debugLogs.length > 0 && (
                <div style={{
                    position: 'fixed',
                    top: '60px',
                    left: '10px',
                    right: '10px',
                    background: 'rgba(0,0,0,0.9)',
                    color: '#00ff00',
                    padding: '10px',
                    fontSize: '10px',
                    fontFamily: 'monospace',
                    zIndex: 9999,
                    maxHeight: '200px',
                    overflow: 'auto',
                    borderRadius: '4px'
                }}>
                    <div style={{ marginBottom: '5px', color: '#ffff00' }}>
                        üì± –ú–æ–±–∏–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ–≤):
                        <button 
                            onClick={() => setDebugLogs([])}
                            style={{
                                float: 'right',
                                background: 'red',
                                color: 'white',
                                border: 'none',
                                padding: '2px 6px',
                                fontSize: '10px',
                                cursor: 'pointer'
                            }}
                        >
                            –û—á–∏—Å—Ç–∏—Ç—å
                        </button>
                    </div>
                    {debugLogs.map((log, index) => (
                        <div key={index} style={{ marginBottom: '2px', wordBreak: 'break-all' }}>
                            {log}
                        </div>
                    ))}
                </div>
            )}

            <style jsx>{`
                @keyframes spin {
                    0% { transform: translateY(-50%) rotate(0deg); }
                    100% { transform: translateY(-50%) rotate(360deg); }
                }
            `}</style>
        </>
    );
};

export default Accordion;